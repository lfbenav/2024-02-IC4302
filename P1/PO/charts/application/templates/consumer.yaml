apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.config.consumer.name }}
  labels:
    app: {{ .Values.config.consumer.name }}
spec:
  replicas: {{ .Values.config.consumer.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.config.consumer.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.config.consumer.name }}
    spec:
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
      containers:
      - name: {{ .Values.config.consumer.name }}
        volumeMounts:
          - mountPath: "/data"
            name: data
        image: {{ .Values.config.docker_registry }}/{{ .Values.config.consumer.image }}
        ports:                                                                #############
        - containerPort: 5000  # Puerto en el que corre tu API          ##########
        env:
          - name: DATAFROMK8S
            value: "Hey"
          - name: AWS_ACCESS_KEY_ID
            value: {{ .Values.config.access_key }}
          - name: AWS_SECRET_ACCESS_KEY
            value: {{ .Values.config.secret_key }}
          - name: BUCKET
            value: {{ .Values.config.bucket }}
          - name: RABBITMQ
            value: "databases-rabbitmq"
          - name: RABBITMQ_QUEUE
            value: "queue"
          - name: RABBITMQ_USER
            value: "user"
          - name: XPATH
            value: "/data"
          - name: RABBITMQ_PASS
            valueFrom:
              secretKeyRef:
                name: databases-rabbitmq
                key: rabbitmq-password
                optional: false
          - name: MARIADB
            value: "databases-mariadb"
          - name: MARIADB_TABLE
            value: "objects"
          - name: MARIADB_DB
            value: "control"
          - name: MARIADB_USER
            value: "root"
          - name: MARIADB_PASS
            valueFrom:
              secretKeyRef:
                name: databases-mariadb
                key: mariadb-root-password
                optional: false
          - name: ELASTIC_USER
            value: "elastic"
          - name: ELASTIC_PASS
            valueFrom:
              secretKeyRef:
                name: ic4302-es-elastic-user
                key: elastic
                optional: false
          - name: ELASTIC
            value: "ic4302-es-http"



###########

---

apiVersion: v1
kind: Service
metadata:
  name: hugging-face-api-nodeport
  namespace: default
  labels:                                                                     ### EUltima cosa que cambie
    app: hugging-face-api  # Esta etiqueta debe coincidir con el ServiceMonitor  ####
spec:
  ports:
    - name: hugging-face-http  # Cambia el nombre del puerto a algo único
      protocol: TCP
      port: 5000  # Cambiado a 5000 para coincidir con Flask
      targetPort: 5000  # Cambiado a 5000 para coincidir con Flask
  selector:
    app: hugging-face-api
  type: NodePort

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: hugging-face-api-monitor
  labels:
    app: hugging-face-api  # Debe coincidir con el label del Service
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: hugging-face-api  # Este label debe coincidir con el selector en el Service
  endpoints:
  - port: hugging-face-http  # Nombre del puerto que debe coincidir con el del Service
    path: metrics  # El endpoint donde expone las métricas 
    interval: 15s
  namespaceSelector:
    matchNames:
    - default  # El namespace donde corre tu API